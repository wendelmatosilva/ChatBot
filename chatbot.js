// leitor de qr code
const qrcode = require('qrcode-terminal');
const { Client, LocalAuth } = require('whatsapp-web.js');

// Inicializa o cliente e salva sess√£o local
const client = new Client({
    authStrategy: new LocalAuth({ clientId: 'samia-bot' })
});

// Servi√ßo de leitura do QR code
client.on('qr', (qr) => {
    qrcode.generate(qr, { small: true });
});

// Mensagem quando conectar
client.on('ready', () => {
    console.log('‚úÖ Tudo certo! WhatsApp conectado.');
});

// Inicializa tudo
client.initialize();

// Fun√ß√£o de delay
const delay = ms => new Promise(res => setTimeout(res, ms));

// Fun√ß√£o para verificar o hor√°rio de funcionamento
const isHorarioComercial = () => {
    const agora = new Date();
    const hora = agora.getHours();
    return hora >= 7 && hora < 17;
};

// Funil de mensagens
client.on('message', async msg => {
    try {
        // Ignorar mensagens de grupos ou status
        if (!msg.from.endsWith('@c.us')) return;

        const chat = await msg.getChat();
        const contact = await msg.getContact();
        const rawName = contact.pushname || contact.name || contact.number || '';
        const firstName = (rawName || '').split(' ')[0] || 'Respons√°vel';

        // MENU PRINCIPAL - palavras de ativa√ß√£o
        if (/(op√ß√£o|opcao|menu|oi|ol√°|ola|dia|tarde|noite)/i.test(msg.body)) {
            try { await chat.sendStateTyping(); } catch {}
            await delay(1200);

            if (!isHorarioComercial()) {
                await client.sendMessage(
                    msg.from,
                    '‚ö†Ô∏è AVISO: O nosso hor√°rio de atendimento √© de 7h √†s 17h, de segunda a sexta-feira.\n' +
                    'Sua mensagem ser√° respondida assim que poss√≠vel, dentro do nosso hor√°rio de funcionamento.'
                );
                return;
            }

            await client.sendMessage(
                msg.from,
                'üëã Ol√°, ' + firstName + '! Sou *S.A.M.I.A*, assistente virtual da *EMEIF M¬™ Am√©lia Pontes*.\n\n' +
                '‚ö†Ô∏è AVISO: ESTE CANAL √â SOMENTE PARA SERVI√áOS EM PDF.\n\n' +
                'Como posso ajud√°-lo(a) hoje? Digite uma das op√ß√µes abaixo:\n\n' +
                '1Ô∏è‚É£ - Transfer√™ncia (Hist√≥rico Escolar)\n' +
                '2Ô∏è‚É£ - Declara√ß√µes'
            );
            return;
        }

        // OP√á√ÉO 1 - TRANSFER√äNCIA
        if (msg.body === '1') {
            try { await chat.sendStateTyping(); } catch {}
            await delay(1000);

            await client.sendMessage(
                msg.from,
                'üìÑ Voc√™ escolheu *Pedido de Transfer√™ncia (Hist√≥rico Escolar)*.\n\n' +
                'Por favor, informe os dados:\n' +
                '- Nome do aluno\n- S√©rie\n- Nome do solicitante\n- CPF do solicitante\n- Grau de parentesco com o aluno'
            );
            return;
        }
        
        // OP√á√ÉO 2 - DECLARA√á√ïES
        if (msg.body === '2') {
            try { await chat.sendStateTyping(); } catch {}
            await delay(1000);

            await client.sendMessage(
                msg.from,
                'üìë Voc√™ escolheu *Declara√ß√µes*.\n\n' +
                'Digite o n√∫mero da declara√ß√£o desejada:\n' +
                '1Ô∏è‚É£ - Matr√≠cula\n' +
                '2Ô∏è‚É£ - Transfer√™ncia\n' +
                '3Ô∏è‚É£ - Bolsa Fam√≠lia\n' +
                '4Ô∏è‚É£ - Emprego/Est√°gio\n' +
                '6Ô∏è‚É£ - Carteira de Estudante\n' +
                '7Ô∏è‚É£ - Curso/Isen√ß√£o\n' +
                '9Ô∏è‚É£ - Outra (especifique)\n\n' +
                '‚ö†Ô∏è Ap√≥s escolher, informe tamb√©m:\n' +
                '- Nome do aluno\n- ' +
                'S√©rie\n- ' +
                'Nome do solicitante\n- ' +
                'CPF do solicitante\n- ' +
                'Grau de parentesco com o aluno'
            );
            return;
        }

        // Condi√ß√£o FINAL para mensagem de agradecimento
        if (
            msg.body.length > 5 && // Mensagem com pelo menos 5 caracteres (para n√£o responder a 'oi')
            !/(op√ß√£o|opcao|menu|oi|ol√°|ola|dia|tarde|noite|1|2)/i.test(msg.body) // N√£o √© uma das op√ß√µes principais
        ) {
            try { await chat.sendStateTyping(); } catch {}
            await delay(1000);

            await client.sendMessage(
                msg.from,
                'Obrigado pelas informa√ß√µes, ap√≥s a confer√™ncia sua solicita√ß√£o ser√° encaminhada e respondida o mais breve poss√≠vel.'
            );
            return;
        }

    } catch (err) {
        console.error('‚ùå Erro no handler:', err);
    }
});